@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using StudentManagment.Models.DataModels;
@{
    ViewData["Title"] = "All Email";
    var currentDate = DateTime.Now;
    var currentMonth = currentDate.Month;
}
@model StudentManagement.Models.RoleBaseResponse<EmailViewModel>
<div class="container-fluid">
    <div class="send-email-div">
        <button onclick="OpenEditModal(0)" type="button" class="btn send-email-btn">
            Send Email
        </button>
    </div>

</div>
<div class="container-fluid">
    <div class="search-div row">
        <div class="col-md-5 col-lg-5 col-12 col-sm-12">
            <div class="form-group pb-4">
                <div class="input_box">
                    <input id="inputsearch"
                           class="form-control"
                           type="search"
                           placeholder="Search Email" />
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid table-responsive">
        <table id="StudentTable" class="table table-borderless">
        </table>
    </div>

    <div>
        <div class="icon-div">
            <div id="left-icon" class="left-icon">
                <i class="fa fa-angle-left" style="font-size:24px"></i>
            </div>
            <div id="right-icon" class="right-icon">
                <i class="fa fa-angle-right" style="font-size:24px"></i>
            </div>
        </div>
        <canvas width="400" height="100" id="myChart"></canvas>
    </div>
</div>
<div id="popups"></div>

<script>


    function loadDataTable(startIndex) {
        var TOTAL_ITEMS = 0;
        var searchQuery = $("#inputsearch").val();
        var pageSize = $("#dt-length-0").val();
        var secondApiRequest = {
            searchQuery: searchQuery,
            StartIndex: startIndex,
            PageSize: pageSize,
        }
        sessionStorage.setItem("currentPageIndex", startIndex);
        var table = new DataTable('#StudentTable', {
            searching: false,
            "infoCallback": function (settings, start, end, max, total, pre) {

                var pageInfo = this.api().page.info(); // Get the current page info
                var pageSize1 = $("#dt-length-0").val();;

                currentPageIndex = parseInt(sessionStorage.getItem("currentPageIndex"), 10);

                var startIndex = (currentPageIndex * pageSize1) + 1;

                var endIndex = Math.min(parseInt(startIndex, 10) + parseInt(pageSize1, 10) - 1, parseInt(TOTAL_ITEMS, 10));
                if (parseInt(endIndex, 10) === parseInt(TOTAL_ITEMS, 10)) {
                    $(".page-link.next").addClass("disabled");
                }
                else {
                    $(".page-link.next").removeClass("disabled");
                }

                if (startIndex == 1) {
                    $(".page-link.previous").addClass("disabled");
                }
                else {
                    $(".page-link.previous").removeClass("disabled");

                }
                return "Showing " + startIndex + " to " + endIndex + " of " + TOTAL_ITEMS + " entries";
            },
            drawCallback: function () {

                $(".dt-paging-button").removeClass("disabled");
            },
            "initComplete": function (settings, json) {
                $(".dt-paging-button").removeClass("disabled");
                var pageSize1 = $("#dt-length-0").val();

                if (TOTAL_ITEMS <= pageSize1) {
                    console.log("total items", TOTAL_ITEMS);
                    console.log("page size", pageSize1);
                    $(".page-link.next").addClass("disabled");
                }
                else {
                    console.log("total items else", TOTAL_ITEMS);
                    console.log("page size else", pageSize1);
                    $(".page-link.next").removeClass("disabled");
                }
            },
            "lengthMenu": [[5, 10, 15], [5, 10, 15]],
            "pageLength": pageSize,
            "language": {
                oPaginate: {
                    sNext: '<i class="bi bi-caret-right-fill text-info"></i>',
                    sPrevious: '<i class="bi bi-caret-left-fill text-info"></i>'

                }
            },
            "stateSave": true,
            "pagingType": "simple",

            ajax: {
                method: "POST",
                url: "/Home/GetFilteredScheduledEmails",
                data: secondApiRequest,
                dataType: "JSON",
                dataSrc: function (response) {
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    }
                    TOTAL_ITEMS = response.totalItems;
                    return response.data;
                },
                error: function () {
                    console.log("Function Fail")
                }
            },
            columns: [
                {
                    "title": "ScheduledEmailId",
                    "data": "scheduledEmailId",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        return data1;
                    }
                },
                {
                    "title": "StudentName",
                    "data": "firstName",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        if (data1 == null) {
                            data1 = "All Students";
                            row.lastName = ""
                        }
                        return "<span class='input-values-" + row.scheduledEmailId + "' >" + data1 + " " + row.lastName + "</span>";
                    }
                },
                {
                    "title": "Subject",
                    "data": "subject",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        if (data1 == null) {
                            data1 = "-";
                        }
                        return "<span class='input-values-" + row.scheduledEmailId + "'>" + data1 + "</span>";
                    }
                },
                {
                    "title": "Date To Send",
                    "data": "sentDate",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        var date = new Date(data1);
                        var localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));
                        var formattedDate = localDate.toISOString().split('T')[0];
                        return "<span class='input-values-" + row.scheduledEmailId + "'>" + formattedDate + "</span>";

                    }
                },
                {
                    "title": "IsSent",
                    "data": "isSent",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        var string = "";
                        if (data1 != "") {
                            string = "<i style='color:green;' class='fa fa-check' aria-hidden='true'></i>"
                        }
                        else {
                            string = "<i style = 'color:grey;' class='fa fa-clock-o' aria-hidden='true'></i>"
                        }
                        return string;

                    }
                },
                {
                    "title": "Action",
                    "data": "-",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        var div = "";
                        if (row.isSent == "") {
                            div = "<div class='inline-flex'> <i onclick='OpenEditModal(" + row.scheduledEmailId + ")' id='edit-btn-" + row.scheduledEmailId + "' style='color:green;' class='fas fa-edit'></i>";
                        }
                        return div;
                    }
                },
            ]
        });
        return table;

    }


    $(document).ready(function () {
        sessionStorage.setItem("currentPageIndex", 0);
        var table = loadDataTable(0);
        $("#dt-length-0").val(5);
        $(".dt-paging-button").removeClass("disabled");
        $(document).on('change', '.form-select', function (event) {
            var pageSize = $("#dt-length-0").val();
            var secondApiRequest = {
                StartIndex: 0,
                PageSize: pageSize,
            };
            event.preventDefault();
            $.ajax({
                method: "POST",
                url: "/Home/GetFilteredScheduledEmails",
                data: secondApiRequest,
                dataSrc: "data",
                success: function (response) {
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    }
                    sessionStorage.setItem("currentPageIndex", 0);
                    var newRows = response.data;

                    table.clear();
                    table.rows.add(newRows).draw(false);
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        });

        $(document).on('keyup', '#inputsearch', function (event) {
            var pageSize = $("#dt-length-0").val();
            var secondApiRequest = {
                searchQuery: this.value,
                StartIndex: 0,
                PageSize: pageSize,
            };
            $.ajax({
                method: "POST",
                url: "/Home/GetFilteredScheduledEmails",
                data: secondApiRequest,
                dataSrc: "data",
                success: function (response) {
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    }
                    sessionStorage.setItem("currentPageIndex", 0);
                    var newRows = response.data;

                    table.clear();
                    table.rows.add(newRows).draw(false);
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        });

        let currentPageIndex = 0;
        let totalPages = table.page.info().pages;
        $(document).on('click', '.page-link.next', function (event) {
            var pageSize = $("#dt-length-0").val();
            if (sessionStorage.getItem("currentPageIndex") != null) {
                currentPageIndex = parseInt(sessionStorage.getItem("currentPageIndex"), 10) + 1;
            }
            let startIndex = currentPageIndex * pageSize;
            event.preventDefault();
            var secondApiRequest = {
                StartIndex: startIndex,
                PageSize: pageSize,
            };
            $.ajax({
                method: "POST",
                url: "/Home/GetFilteredScheduledEmails",
                data: secondApiRequest,
                dataSrc: "data",
                success: function (response) {
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    }
                    sessionStorage.setItem("currentPageIndex", currentPageIndex);
                    var newRows = response.data;

                    table.clear();
                    table.rows.add(newRows).draw(false);
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        });

        $(document).on('click', '.page-link.previous', function (event) {
            event.preventDefault();
            var pageSize = $("#dt-length-0").val();
            if (sessionStorage.getItem("currentPageIndex") != null) {
                currentPageIndex = parseInt(sessionStorage.getItem("currentPageIndex"), 10) - 1;
                if (parseInt(currentPageIndex, 10) < 0) {

                    currentPageIndex = 0;
                }
            }
            let startIndex1 = currentPageIndex * pageSize;
            var secondApiRequest = {
                StartIndex: startIndex1,
                PageSize: pageSize,
            };
            $.ajax({
                method: "POST",
                url: "/Home/GetFilteredScheduledEmails",
                data: secondApiRequest,
                dataSrc: "data",
                success: function (response) {
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    }
                    console.log(response);
                    sessionStorage.setItem("currentPageIndex", currentPageIndex);
                    var newRows = response.data;

                    table.clear();
                    table.rows.add(newRows).draw(false);

                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        });
    });

    function OpenEditModal(scheduledEmailId) {
        $.ajax({
            type: "get",
            url: '@Url.Action("SendEmailModal","Home")',
            data: {
                ScheduledEmailId: scheduledEmailId,
            },
            success: function (response) {
                if (response.redirect) {
                    window.location.href = response.redirect;
                }
                $('#popups').html(response)
                $('#SendEmailModal').modal("show");
            },
            error: function (xhr, status, error) {
                console.error(error + "djsfhsdjkfhsdkjfh");
            }
        });
    }
</script>

<script>

    $(document).ready(function () {
        // Initialize the chart without data
        var currentMonth = new Date().getMonth() + 1;
        var currentYear = new Date().getFullYear();
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                //labels: [],
                datasets: [{
                    label: '',
                    data: [],
                    borderWidth: 1,
                    borderColor: '#FF6384',
                    backgroundColor: '#FFB1C1',
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    },
                    x: {
                        type: 'time',
                        position: 'bottom',
                        time: {
                            unit: 'day',
                        }
                    },
                }
            },

        });

        GetChart(currentMonth, currentYear, myChart);

        $("#left-icon").on('click', function () {
            if (currentMonth == 1) {
                currentMonth = 12;
                currentYear = currentYear - 1;
                GetChart(currentMonth, currentYear, myChart);

            }
            else {

                GetChart(currentMonth - 1, currentYear, myChart);
                currentMonth = currentMonth - 1;
            }

        });

        $("#right-icon").on('click', function () {
            if (currentMonth == 12) {
                currentMonth = 1;
                currentYear = currentYear + 1;
                GetChart(currentMonth, currentYear, myChart);
            }
            else {
                GetChart(currentMonth + 1, currentYear, myChart);
                currentMonth = currentMonth + 1;
            }

        })
    });


    function GetChart(month, year, myChart) {
        $.ajax({
            url: 'GetChartDetails',
            type: 'GET',
            data: {
                month: month,
                year: year,
            },
            dataType: 'json',
            success: function (response) {
                if (response == false) {
                    window.location.href = '/Login/Logout';
                }
                //console.log(response);
                var labels = [];
                var dataPoints = [];

                response.data.forEach(function (item) {
                    labels.push(item.sentDate);
                    dataPoints.push(item.dayWiseCount);
                });

                myChart.data.labels = labels;
                myChart.data.datasets[0].data = dataPoints;
                myChart.data.datasets[0].label = response.monthName + " / " + response.year + " EmailLogs";

                myChart.update();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error fetching data:", textStatus, errorThrown);
            }
        });
    }
</script>