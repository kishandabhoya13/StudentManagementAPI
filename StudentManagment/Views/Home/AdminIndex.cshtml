@using StudentManagment.Models.DataModels;
@{
    ViewData["Title"] = "Home Page";
}
@model StudentManagement.Models.RoleBaseResponse<Student>
<div class="container-fluid">
    <div class="search-div">
        <div class="form-group pb-4 div1">
            <div class="input_box">
                <input id="inputsearch"
                       class="form-control"
                       type="search"
                       placeholder="Search Student" />
            </div>
        </div>
        <div class="div2">
            <a asp-controller="Home" asp-action="CreateUpdateStudent" class="btn send-email-btn text-center d-flex align-items-center">
                Create Student
            </a>
        </div>

    </div>
    <div class="container-fluid table-responsive">
        <div class="plus-minus-div">
            <div class="plus-minus-icon-div">
                <div id="minus-icon" class="left-icon">
                    <i class="fa fa-minus" style="font-size:24px"></i>
                </div>
                <div id="plus-icon" class="right-icon">
                    <i class="fa fa-plus" style="font-size:24px"></i>
                </div>
            </div>
        </div>

        <table id="StudentTable" class="table table-borderless">
        </table>
    </div>

    <div class="row">
        <div class="col-md-6 col-lg-6 col-12 col-sm-12 canvas-div">
            <div class="icon-div">
                <div id="left-left-icon" class="left-icon">
                    <i class="fa fa-angle-left" style="font-size:24px"></i>
                </div>
                <d iv id="left-right-icon" class="right-icon">
                    <i class="fa fa-angle-right" style="font-size:24px"></i>
                </d>
            </div>
            <canvas width="400" height="100" id="myChart"></canvas>
        </div>
        <div class="col-md-6 col-lg-6 col-12 col-sm-12 canvas-div">
            <div class="icon-div">
                <div id="right-left-icon" class="left-icon">
                    <i class="fa fa-angle-left" style="font-size:24px"></i>
                </div>
                <div id="right-right-icon" class="right-icon">
                    <i class="fa fa-angle-right" style="font-size:24px"></i>
                </div>
            </div>
            <canvas width="400" height="100" id="myChart2"></canvas>
        </div>
    </div>
</div>
<div id="popup"></div>
<script>
    function CreateCourse() {
        $.ajax({
            type: "get",
            url: '@Url.Action("CreateCourseModal","Home")',
            data: {},
            success: function (response) {
                $('#popup').html(response)
                $('#CreateCourseModal').modal("show");
            },
            error: function (xhr, status, error) {
                console.error(error + "djsfhsdjkfhsdkjfh");
            }
        });
    };

    function loadDataTable(startIndex) {
        var TOTAL_ITEMS = 0;
        var searchQuery = $("#inputsearch").val();
        var pageSize = $("#dt-length-0").val();
        var secondApiRequest = {
            searchQuery: searchQuery,
            StartIndex: startIndex,
            PageSize: pageSize,
        }
        sessionStorage.setItem("currentPageIndex", startIndex);
        var table = new DataTable('#StudentTable', {
            searching: false,
            rowId: function (data) {
                return data.studentId;
            },
            "infoCallback": function (settings, start, end, max, total, pre) {

                var pageInfo = this.api().page.info(); // Get the current page info
                var pageSize1 = $("#dt-length-0").val();;

                currentPageIndex = parseInt(sessionStorage.getItem("currentPageIndex"), 10);

                var startIndex = (currentPageIndex * pageSize1) + 1;

                var endIndex = Math.min(parseInt(startIndex, 10) + parseInt(pageSize1, 10) - 1, parseInt(TOTAL_ITEMS, 10));
                if (parseInt(endIndex, 10) === parseInt(TOTAL_ITEMS, 10)) {
                    $(".page-link.next").addClass("disabled");
                }
                else {
                    $(".page-link.next").removeClass("disabled");
                }

                if (startIndex == 1) {
                    $(".page-link.previous").addClass("disabled");
                }
                else {
                    $(".page-link.previous").removeClass("disabled");

                }
                return "Showing " + startIndex + " to " + endIndex + " of " + TOTAL_ITEMS + " entries";
            },
            drawCallback: function () {

                $(".dt-paging-button").removeClass("disabled");
            },
            "initComplete": function (settings, json) {
                $(".dt-paging-button").removeClass("disabled");
            },
            "lengthMenu": [[5, 10, 15], [5, 10, 15]],
            "pageLength": pageSize,
            "language": {
                oPaginate: {
                    sNext: '<i class="bi bi-caret-right-fill text-info"></i>',
                    sPrevious: '<i class="bi bi-caret-left-fill text-info"></i>'

                }
            },
            "stateSave": true,
            "pagingType": "simple",

            ajax: {
                method: "POST",
                url: "/Home/AdminIndexTableView",
                data: secondApiRequest,
                dataType: "JSON",
                dataSrc: function (response) {
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    }
                    TOTAL_ITEMS = response.totalItems;
                    return response.data;
                },
                error: function () {
                    console.log("Function Fail")
                }
            },
            columns: [
                {
                    "title": "StudentId",
                    "data": "studentId",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        return data1;
                    }
                },
                {
                    "title": "Count",
                    "data": "-",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        return "1.00";
                    }
                },
                {
                    "title": "FirstName",
                    "data": "firstName",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        return "<input id='firstname-input-" + row.studentId + "' class='table-inputs form-control-disables-" + row.studentId + "' style='display:none;' type='text' asp-for='" + data1 + "' value='" + data1 + "'/> <a class='input-values-" + row.studentId + "' href='/Home/CreateUpdateStudent?StudentId=" + row.studentId + "'>" + data1 + "</a>";
                    }
                },
                {
                    "title": "LastName",
                    "data": "lastName",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        return "<input id='lastname-input-" + row.studentId + "' class='table-inputs form-control-disables-" + row.studentId + "' style='display:none;' type='text' asp-for='" + data1 + "' value='" + data1 + "'/> <span class='input-values-" + row.studentId + "'>" + data1 + "</span>";
                    }
                },
                {
                    "title": "Email",
                    "data": "email",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        if (data1 == null) {
                            data1 = "-";
                        }
                        return "<input id='email-input-" + row.studentId + "' class='table-inputs form-control-disables-" + row.studentId + "' style='display:none;' type='text' asp-for='" + data1 + "' value='" + data1 + "'/> <span class='input-values-" + row.studentId + "'>" + data1 + "</span>";
                    }
                },
                {
                    "title": "BirthDate",
                    "data": "birthDate",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        var date = new Date(data1);
                        var localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));
                        var formattedDate = localDate.toISOString().split('T')[0];
                        return "<input id='birthdate-input-" + row.studentId + "' class='table-inputs form-control-disables-" + row.studentId + "' style='display:none;' type='date' asp-for='" + data1 + "' value='" + formattedDate + "'/> <span class='input-values-" + row.studentId + "'>" + formattedDate + "</span>";

                    }
                },
                {
                    "title": "CourseName",
                    "data": "courseName",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        return "<select id='courseDropdown-" + row.studentId + "' style='display:none;'></select> <span class='input-values-" + row.studentId + "'>" + data1 + "</span>";

                    }
                },
                {
                    "title": "UserName",
                    "data": "userName",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        return "<input id='username-input-" + row.studentId + "' class='table-inputs form-control-disables-" + row.studentId + "' style='display:none;' type='text' asp-for='" + data1 + "' value='" + data1 + "'/> <span class='input-values-" + row.studentId + "'>" + data1 + "</span>";

                    }
                },
                {
                    "title": "Action",
                    "data": "-",
                    "class": "text-center",
                    "render": function (data1, type, row) {
                        var blockstring = "";
                        if (row.currentUserRole == 1) {
                            if (row.isBlocked) {
                                blockstring = "<i onclick='BlockUnblockModal(" + row.studentId + "," + row.isBlocked + ")' id='edit-btn-" + row.studentId + "' style='color:red;' class='bx bx-block'></i>"
                            }
                            else {
                                blockstring = "<i onclick='BlockUnblockModal(" + row.studentId + "," + row.isBlocked + ")' id='edit-btn-" + row.studentId + "' style='color:green;' class='fa fa-unlock'></i>"
                            }
                        }
                        return "<div class='inline-flex'> <i onclick='displayInput(" + row.studentId + "," + row.courseId + ")' id='edit-btn-" + row.studentId + "' style='color:green;' class='fas fa-edit'></i>"
                            + "<i onclick='incrementCountOneColumn(" + row.studentId + ")' id='edit-btn-" + row.studentId + "' style='color:green;' class='fas fa-plus'></i>"
                            + "<i onclick='decrementCountOneColumn(" + row.studentId + ")' id='edit-btn-" + row.studentId + "' style='color:red;' class='fas fa-minus'></i>"
                            + blockstring
                            + "<div id='right-div-" + row.studentId + "' class='right-wrong-div right-div' style='display:none'>"
                            + "<i style='color:green;' onclick='updateStudent(" + row.studentId + ")' class='fa fa-check' aria-hidden='true'></i></div>"
                            + "<div id='wrong-div-" + row.studentId + "' onclick='hideInput(" + row.studentId + ")' class='right-wrong-div wrong-div' style='display:none'>"
                            + "<i style='color:red;' class='fa fa-times' aria-hidden='true'></i>"
                            + "</div></div>";
                    }
                },
            ]
        });
        return table;

    }

    function BlockUnblockModal(Id, isBlocked) {
        $.ajax({
            type: "get",
            url: '@Url.Action("BlockUnblockStudentModal","Home")',
            data: {
                Id: Id,
                IsBlocked: isBlocked,
            },
            success: function (response) {
                $('#popup').html(response)
                $('#BlockUnblockStudentModal').modal("show");
            },
            error: function (xhr, status, error) {
                console.error(error + "djsfhsdjkfhsdkjfh");
            }
        });
    };



    $(document).ready(function () {
        console.log(localStorage.getItem("currentCount"));

        var currentCounts = {};
        sessionStorage.setItem("currentPageIndex", 0);
        var table = loadDataTable(0);
        $("#dt-length-0").val(5);
        $(".dt-paging-button").removeClass("disabled");
        $(document).on('change', '.form-select', function (event) {
            var pageSize = $("#dt-length-0").val();
            var secondApiRequest = {
                StartIndex: 0,
                PageSize: pageSize,
            };
            event.preventDefault();
            $.ajax({
                method: "POST",
                url: "/Home/AdminIndexTableView",
                data: secondApiRequest,
                dataSrc: "data",
                success: function (response) {
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    }
                    if (response == false) {
                        window.location.href = '/Login/Logout';
                    }
                    sessionStorage.setItem("currentPageIndex", 0);
                    var newRows = response.data;
                    table.clear();

                    table.rows.add(newRows).draw(false);
                    incrementForChanging();

                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        });

        $(document).on('keyup', '#inputsearch', function (event) {
            var pageSize = $("#dt-length-0").val();
            var secondApiRequest = {
                searchQuery: this.value,
                StartIndex: 0,
                PageSize: pageSize,
            };
            $.ajax({
                method: "POST",
                url: "/Home/AdminIndexTableView",
                data: secondApiRequest,
                dataSrc: "data",
                success: function (response) {
                    if (response == false) {
                        window.location.href = '/Login/Logout';
                    }
                    sessionStorage.setItem("currentPageIndex", 0);
                    var newRows = response.data;

                    table.clear();
                    table.rows.add(newRows).draw(false);

                    incrementForChanging();

                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        });

        let currentPageIndex = 0;
        let totalPages = table.page.info().pages;
        $(document).on('click', '.page-link.next', function (event) {
            var pageSize = $("#dt-length-0").val();
            if (sessionStorage.getItem("currentPageIndex") != null) {
                currentPageIndex = parseInt(sessionStorage.getItem("currentPageIndex"), 10) + 1;
            }
            let startIndex = currentPageIndex * pageSize;
            event.preventDefault();
            var secondApiRequest = {
                StartIndex: startIndex,
                PageSize: pageSize,
            };
            $.ajax({
                method: "POST",
                url: "/Home/AdminIndexTableView",
                data: secondApiRequest,
                dataSrc: "data",
                success: function (response) {
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    }
                    if (response == false) {
                        window.location.href = '/Login/Logout';
                    }
                    sessionStorage.setItem("currentPageIndex", currentPageIndex);
                    var newRows = response.data;

                    table.clear();
                    table.rows.add(newRows).draw(false);

                    incrementForChanging();

                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        });

        $(document).on('click', '.page-link.previous', function (event) {
            event.preventDefault();
            var pageSize = $("#dt-length-0").val();
            if (sessionStorage.getItem("currentPageIndex") != null) {
                currentPageIndex = parseInt(sessionStorage.getItem("currentPageIndex"), 10) - 1;
            }
            let startIndex1 = currentPageIndex * pageSize;
            var secondApiRequest = {
                StartIndex: startIndex1,
                PageSize: pageSize,
            };
            $.ajax({
                method: "POST",
                url: "/Home/AdminIndexTableView",
                data: secondApiRequest,
                dataSrc: "data",
                success: function (response) {
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    }
                    if (response == false) {
                        window.location.href = '/Login/Logout';
                    }
                    sessionStorage.setItem("currentPageIndex", currentPageIndex);
                    var newRows = response.data;

                    table.clear();
                    table.rows.add(newRows).draw(false);

                    incrementForChanging();


                },
                error: function (xhr, status, error) {
                    if (xhr.status === 401) {
                        console.log('Unauthorized - Logout user');
                        // Perform logout action (e.g., redirect to logout page)
                        window.location.href = '/Login/Logout'; // Adjust URL as per your project's logout route
                    } else {
                        console.error('API request error:', error);
                    }
                }
            });
        });


        //function incrementCountOneColumn(rowId) {
        //    console.log(rowId);
        //    var row = table.row('#' + rowId);

        //    if (row && row.length > 0) {
        //        var cell = row.node();
        //        var countCell = $(cell).find('td:eq(1)');
        //        var currentCount = parseFloat(countCell.text());
        //        var newCount = currentCount + 0.20;
        //        countCell.text(newCount.toFixed(2));
        //        currentCounts[rowId] = newCount.toFixed(2);
        //    }
        //}

        window.incrementCountOneColumn = function (rowId) {
            var row = table.row('#' + rowId);
            if (row && row.length > 0) {
                var cell = row.node();

                var countCell = $(cell).find('td:eq(1)');
                var currentCount = parseFloat(countCell.text());
                var newCount = currentCount + 1;
                countCell.text(newCount.toFixed(2));
                currentCounts[rowId] = newCount.toFixed(2);
            }
        };


        window.decrementCountOneColumn = function (rowId) {
            var row = table.row('#' + rowId);
            if (row && row.length > 0) {
                var cell = row.node();

                var countCell = $(cell).find('td:eq(1)');
                var currentCount = parseFloat(countCell.text());
                var newCount = currentCount - 1;
                countCell.text(newCount.toFixed(2));
                currentCounts[rowId] = newCount.toFixed(2);
            }
        };





        //FOR INCREASE COUNT BY 0.20
        function incrementCountColumn() {
            table.rows({ search: 'applied' }).every(function () {
                var cell = this.node();
                var rowId = this.id();
                var countCell = $(cell).find('td:eq(1)');
                var currentCount = parseFloat(countCell.text());
                var newCount = currentCount + 0.20;
                countCell.text(newCount.toFixed(2));
                //if (currentCounts.hasOwnProperty(rowId)) {
                //    currentCounts[rowId] = newCount.toFixed(2);
                //}
                //else {
                //    currentCounts["currentCount"] = newCount.toFixed(2);
                //    console.log("current count", currentCounts["currentCount"]);
                //}

                if (!currentCounts.hasOwnProperty(rowId)) {
                    currentCounts["currentCount"] = newCount.toFixed(2);
                    console.log("current count", currentCounts["currentCount"]);
                }
            });
            for (var key in currentCounts) {
                if (key !== "currentCount") {
                    var currentValue = parseFloat(currentCounts[key]);
                    currentCounts[key] = (currentValue + 0.20).toFixed(2);
                    console.log("current counts key value ", currentCounts[key]);

                }
            }
        }


        //FOR INCREASE COUNT BY CLICK ON PLUS BUTTON
        function incrementCountColumn1() {
            table.rows({ search: 'applied' }).every(function () {
                var cell = this.node();
                var countCell = $(cell).find('td:eq(1)');
                var currentCount = parseFloat(countCell.text());
                var newCount = currentCount + 1;
                countCell.text(newCount.toFixed(2));
                currentCounts["currentCount"] = newCount.toFixed(2);
            });
        }


        $(document).on('click', '#plus-icon', function (event) {
            console.log("plus");
            incrementCountColumn1();
        });


        //FOR DECREASE COUNT BY CLICK ON MINUS BUTTON
        function decrementCountColumn1() {
            table.rows({ search: 'applied' }).every(function () {
                var cell = this.node();
                var countCell = $(cell).find('td:eq(1)');
                var currentCount = parseFloat(countCell.text());
                var newCount = currentCount - 1;
                countCell.text(newCount.toFixed(2));
                currentCounts["currentCount"] = newCount.toFixed(2);
            });
        }


        $(document).on('click', '#minus-icon', function (event) {
            decrementCountColumn1();
        });


        //SET INTERVAL
        setInterval(incrementCountColumn, 10000);



        //FOR GET PREVIOUS COUNT AFTER CHANGE SIZE OR PAGES
        function incrementForChanging() {
            table.rows({ search: 'applied' }).every(function () {
                var cell = this.node();
                var rowId = this.id();
                var countCell = $(cell).find('td:eq(1)');
                var currentCount = countCell.text();
                var newCount = currentCount; // Start with currentCount as default

                if (currentCounts[rowId] != null) {
                    newCount = parseFloat(currentCounts[rowId]);
                    countCell.text(newCount.toFixed(2));
                }
                else if (currentCounts["currentCount"] != null) {
                    newCount = parseFloat(currentCounts["currentCount"]);
                    countCell.text(newCount.toFixed(2));
                }
                else {

                    countCell.text(newCount);
                }

            });
        }
    });


</script>
<script>
    function displayInput(StudentId, CourseId) {
        let editbtn = document.getElementById(`edit-btn-${StudentId}`);
        let submitdiv = document.getElementById(`right-div-${StudentId}`);
        let canceldiv = document.getElementById(`wrong-div-${StudentId}`);
        let inputFields = document.getElementsByClassName(`form-control-disables-${StudentId}`);
        let inputFieldValues = document.getElementsByClassName(`input-values-${StudentId}`);
        let CourseDropdown = $(`#courseDropdown-${StudentId}`);
        var items = @Html.Raw(Json.Serialize(Model.Courses));
        if (CourseDropdown.children().length === 0) {
            $.each(items, function (index, value) {
                let isSelected = value.courseId === CourseId ? "selected" : "";
                CourseDropdown.append(`<option value='${value.courseId}' ${isSelected}>${value.courseName}</option>`);
            });
        }
        $(`#courseDropdown-${StudentId}`).picker();
        editbtn.style.display = 'none';
        submitdiv.style.display = 'flex';
        canceldiv.style.display = 'flex';

        for (let i = 0; i < inputFields.length; i++) {
            inputFields[i].style.display = 'inline-block';
        }

        for (let i = 0; i < inputFieldValues.length; i++) {
            //courseDropdown.style.display = 'inline-block';
            inputFieldValues[i].style.display = 'none';
        }
    }


    function hideInput(StudentId) {
        let editbtn = document.getElementById(`edit-btn-${StudentId}`);
        let submitdiv = document.getElementById(`right-div-${StudentId}`);
        let canceldiv = document.getElementById(`wrong-div-${StudentId}`);

        let inputFields = document.getElementsByClassName(`form-control-disables-${StudentId}`);
        let inputFieldValues = document.getElementsByClassName(`input-values-${StudentId}`);
        let courseDropdown = document.getElementById(`courseDropdown-${StudentId}`);

        editbtn.style.display = 'block';
        submitdiv.style.display = 'none';
        canceldiv.style.display = 'none';
        $(`#courseDropdown-${StudentId}`).picker('destroy');
        courseDropdown.style.display = 'none';
        for (let i = 0; i < inputFields.length; i++) {
            inputFields[i].style.display = 'none';
        }

        for (let i = 0; i < inputFieldValues.length; i++) {
            inputFieldValues[i].style.display = 'inline-block';
        }

    }

    function updateStudent(StudentId) {
        var firstname = $(`#firstname-input-${StudentId}`).val();

        var lastname = $(`#lastname-input-${StudentId}`).val();

        var birthdate = $(`#birthdate-input-${StudentId}`).val();

        var username = $(`#username-input-${StudentId}`).val();

        var email = $(`#email-input-${StudentId}`).val();

        var courseDropdown = $(`#courseDropdown-${StudentId}`).val();

        var filter = @Html.Raw(@"/^[^@\s]+@[^@\.\s]+(\.[^@\.\s]+)+$/");
        if (!filter.test(email)) {
            alert("Email is Invalid");
        } else {
            var studentViewModel =
            {
                StudentId: StudentId,
                FirstName: firstname,
                LastName: lastname,
                BirthDate: birthdate,
                CourseId: courseDropdown,
                UserName: username,
                Email: email,
            };
            $.ajax({
                type: "POST",
                url: '@Url.Action("UpsertStudent","Home")',
                data: studentViewModel,
                success: function (response) {
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    }
                    if (response == false) {
                        window.location.href = '/Login/Logout';
                    }
                    window.location.reload();
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
            console.log(studentViewModel);
        }
    }
</script>

<script>
    $(document).ready(function () {
        var currentMonth = new Date().getMonth() + 1;
        var currentYear = new Date().getFullYear();

        var currentMonth2 = new Date().getMonth() + 1;
        var currentYear2 = new Date().getFullYear();

        var ctx = document.getElementById('myChart').getContext('2d');
        var ctx2 = document.getElementById('myChart2').getContext('2d');

        var mychart1 = new Chart(document.getElementById('myChart'), {
            type: 'bar',
            data: {
                labels: ['Created Students.', 'Created Professors.'],
                datasets: [
                    {
                        label: '',
                        data: [],
                        backgroundColor: 'rgb(119, 185, 229)',
                    },
                    {
                        label: '',
                        data: [],
                        backgroundColor: 'rgb(231,200,28)'
                    },
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        stacked: true,
                        //type: 'time',
                        //position: 'bottom',
                        //time: {
                        //    unit: 'day',
                        //}
                    },
                    y: {
                        stacked: true,
                    }
                },
            }
        });

        var mychart2 = new Chart(document.getElementById('myChart2'), {
            type: 'bar',
            data: {
                labels: ['Created Students.', 'Created Professors.'],
                datasets: [
                    {
                        label: '',
                        data: [],
                        backgroundColor: 'rgb(119, 185, 229)',
                    },
                    {
                        label: '',
                        data: [],
                        backgroundColor: 'rgb(231,200,28)'
                    },
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        stacked: false,
                    },
                    y: {
                        stacked: false,
                    }
                },
            }
        });


        GetChart(currentMonth, currentYear, mychart1, mychart2);

        $("#left-left-icon").on('click', function () {
            if (currentMonth == 1) {
                currentMonth = 12;
                currentYear = currentYear - 1;
                GetChart(currentMonth, currentYear, mychart1, null);

            }
            else {

                GetChart(currentMonth - 1, currentYear, mychart1, null);
                currentMonth = currentMonth - 1;
            }

        });

        $("#left-right-icon").on('click', function () {
            if (currentMonth == 12) {
                currentMonth = 1;
                currentYear = currentYear + 1;
                GetChart(currentMonth, currentYear, mychart1, null);
            }
            else {
                GetChart(currentMonth + 1, currentYear, mychart1, null);
                currentMonth = currentMonth + 1;
            }

        })

        $("#right-left-icon").on('click', function () {
            if (currentMonth2 == 1) {
                currentMonth2 = 12;
                currentYear2 = currentYear2 - 1;
                GetChart(currentMonth2, currentYear2, null, mychart2);

            }
            else {

                GetChart(currentMonth2 - 1, currentYear2, null, mychart2);
                currentMonth2 = currentMonth2 - 1;
            }

        });

        $("#right-right-icon").on('click', function () {
            if (currentMonth2 == 12) {
                currentMonth2 = 1;
                currentYear2 = currentYear2 + 1;
                GetChart(currentMonth2, currentYear2, null, mychart2);
            }
            else {
                GetChart(currentMonth2 + 1, currentYear2, null, mychart2);
                currentMonth2 = currentMonth2 + 1;
            }

        })

    });


    function GetChart(month, year, myChart, myChart2) {
        $.ajax({
            url: 'GetStudentProfessorChartDetails',
            type: 'GET',
            data: {
                month: month,
                year: year,
            },
            dataType: 'json',
            success: function (response) {
                if (response.redirect) {
                    window.location.href = response.redirect;
                }
                var labels = [];
                var dataPoints = [];

                var labels2 = [];
                var dataPoints2 = [];

                response.data.forEach(function (item) {
                    let date = new Date(item.createdDate1); // Convert to Date object if it's a string

                    // Format date as "dd/MMM"
                    let formattedDate = date.toLocaleDateString("en-US", {
                        day: '2-digit',
                        month: 'short'
                    });

                    labels.push(formattedDate);
                    dataPoints.push(item.studentDayWiseCount);
                });

                response.data.forEach(function (item) {
                    dataPoints2.push(item.professorDayWiseCount);
                });


                if (myChart != null) {
                    myChart.data.labels = labels;
                    myChart.data.datasets[0].data = dataPoints;
                    myChart.data.datasets[0].label = response.monthName + " / " + response.year + " CreatedStudents";
                    myChart.data.datasets[0].backgroundColor = 'rgb(119, 215, 229)';

                    myChart.data.datasets[1].data = dataPoints2;
                    myChart.data.datasets[1].label = response.monthName + " / " + response.year + " CreatedProfessors";
                    myChart.data.datasets[1].backgroundColor = 'rgb(231,200,28)';
                    myChart.update();

                }

                if (myChart2 != null) {
                    myChart2.data.labels = labels;
                    myChart2.data.datasets[0].data = dataPoints;
                    myChart2.data.datasets[0].label = response.monthName + " / " + response.year + " CreatedStudents";
                    myChart2.data.datasets[0].backgroundColor = 'rgb(119, 215, 229)';

                    myChart2.data.datasets[1].data = dataPoints2;
                    myChart2.data.datasets[1].label = response.monthName + " / " + response.year + " CreatedProfessors";
                    myChart2.data.datasets[1].backgroundColor = 'rgb(231,200,28)';
                    myChart2.update();

                }


            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error fetching data:", textStatus, errorThrown);
            }
        });
    }



</script>
